---
import Layout from '../../../layouts/Layout.astro';
import SafeRecipeEditForm from '../../../components/SafeRecipeEditForm';

// For static generation, fetch recipes from backend
export async function getStaticPaths() {
  try {
    // Try to fetch recipes from backend
    const IS_PRODUCTION = import.meta.env.MODE === 'production';
    const apiBaseUrl = IS_PRODUCTION 
      ? (import.meta.env.PUBLIC_API_URL || 'https://myfoodmap-production.up.railway.app/api')
      : (import.meta.env.PUBLIC_API_URL || 'http://localhost:3001/api');
    const response = await fetch(`${apiBaseUrl}/recipes`);
    if (response.ok) {
      const recipes = await response.json();
      return recipes.map((recipe: any) => ({
        params: { id: recipe.id }
      }));
    }
  } catch (error) {
    console.warn('Could not fetch recipes for static generation:', error);
  }
  
  // Fallback: generate some common paths and handle others dynamically
  return [
    { params: { id: '1' } },
    { params: { id: '2' } },
    { params: { id: '3' } },
    // Add some common CUID patterns that might exist
    { params: { id: 'cmgm0bmff0002puzulrlt3tfd' } },
    { params: { id: 'cmgm00hgh0005p4uqfh8hlfpf' } },
    { params: { id: 'cmgm049bu000bp4uq3lzw8zqq' } },
    { params: { id: 'cmgm09rhp000tp4uq4qwrbby6' } }
  ];
}

// Get the recipe ID from the URL parameters
const { id } = Astro.params;

// Handle case where ID is not provided
if (!id) {
  return Astro.redirect('/recipes');
}
---

<Layout title="Edit Recipe - MyFoodMap">
	<main class="container mx-auto px-4 py-8">
		<SafeRecipeEditForm 
			client:load
			recipeId={id as string}
		/>
	</main>
</Layout>